apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: CLUSTERNAME
  region: REGION

#managedNodeGroups: <-- not accepted by the warm pool because managedNodeGroups add policies 
nodeGroups:
  - name: gpu-nodegroup
    instanceType: g4dn.xlarge
    # ami: ami-0c909c5081e956d75
    # AMI build using packer.json by running `packer build packer.json`
    ami: ami-0b496e54fd47c524c
    #overrideBootstrapCommand: |
    #  #!/bin/bash
    #  /etc/eks/bootstrap.sh EKS-ondemand-cluster --container-runtime containerd
    overrideBootstrapCommand: |
      #!/bin/bash
      if [[ $(type -P $(which aws)) ]] && [[ $(type -P $(which jq)) ]] ; then
        TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600")
        INSTANCE_ID=$(curl url -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/instance-id)
        REGION=$(curl url -H "X-aws-ec2-metadata-token: $TOKEN" http://169.254.169.254/latest/meta-data/placement/region)
        LIFECYCLE=$(aws autoscaling describe-auto-scaling-instances --region $REGION --instance-id $INSTANCE_ID | jq ".AutoScalingInstances[].LifecycleState" || true)
        if [[ $LIFECYCLE == *"Warmed"* ]]; then
          rm /var/lib/cloud/instances/$INSTANCE_ID/sem/config_scripts_user
          exit 0
        fi
      fi
      /etc/eks/bootstrap.sh EKS-ondemand-cluster
    preBootstrapCommands:
      - for i in 80421 ; do mntPoint="/n/academic_homes/g_${i}" ; mntService="10.31.8.111:/ifs/academic_homes/g_${i}" ; mkdir -p ${mntPoint}; echo ${mntService}$'\t'${mntPoint}$'\t'nfs$'\t'nfsvers=3,rw$'\t'0$'\t'0 >> /etc/fstab ; done && mount -a
    desiredCapacity: 0
    privateNetworking: true # if only 'Private' subnets are given, this must be enabled
    minSize: 0
    maxSize: 200
    volumeSize: 50
    securityGroups:
      attachIDs: ["sg-0fa8f872c4f4ca5f1"] # given that this list of SGs are created beforehand
    iam:
      withAddonPolicies:
        autoScaler: true
    labels:
      nodegroup-type: gpu-node
      instance-type: onDemand
      nodegroupname: gpu
    ssh:
      publicKeyName: PUBLICKEYNAME
#availabilityZones: ["us-east-1c", "us-east-1d"]
# Error when specifying the AZ because GPUs might not be available on the AZ specified.
